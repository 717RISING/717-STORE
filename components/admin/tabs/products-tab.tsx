"use client"

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Plus, Edit, Trash, Loader2 } from 'lucide-react'
import { useToast } from '@/hooks/use-toast'
import { getProducts, addProduct, updateProduct, deleteProduct } from '@/lib/products'
import { Product } from '@/lib/types' // Assuming you have a types file for Product

export function ProductsTab() {
  const [products, setProducts] = useState<Product[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [currentProduct, setCurrentProduct] = useState<Product | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { toast } = useToast()

  useEffect(() => {
    fetchProducts()
  }, [])

  const fetchProducts = async () => {
    setLoading(true)
    setError(null)
    try {
      const fetchedProducts = await getProducts()
      setProducts(fetchedProducts)
    } catch (err) {
      setError('Failed to fetch products.')
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const handleAddProduct = () => {
    setCurrentProduct(null)
    setIsDialogOpen(true)
  }

  const handleEditProduct = (product: Product) => {
    setCurrentProduct(product)
    setIsDialogOpen(true)
  }

  const handleDeleteProduct = async (id: string) => {
    if (window.confirm('¿Estás seguro de que quieres eliminar este producto?')) {
      try {
        await deleteProduct(id)
        toast({
          title: "Producto Eliminado",
          description: "El producto ha sido eliminado exitosamente.",
          variant: "default",
        })
        fetchProducts()
      } catch (err) {
        toast({
          title: "Error",
          description: "No se pudo eliminar el producto.",
          variant: "destructive",
        })
        console.error(err)
      }
    }
  }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setIsSubmitting(true)
    const formData = new FormData(e.currentTarget)
    const productData: Partial<Product> = {
      name: formData.get('name') as string,
      description: formData.get('description') as string,
      price: parseFloat(formData.get('price') as string),
      category: formData.get('category') as string,
      image: formData.get('image') as string,
      sizes: (formData.get('sizes') as string)?.split(',').map(s => s.trim()).filter(s => s !== ''),
      rating: currentProduct?.rating || 0, // Keep existing rating or default to 0
      reviews: currentProduct?.reviews || 0, // Keep existing reviews or default to 0
      details: (formData.get('details') as string)?.split('\n').map(d => d.trim()).filter(d => d !== ''),
    }

    try {
      if (currentProduct) {
        await updateProduct(currentProduct.id, productData)
        toast({
          title: "Producto Actualizado",
          description: "El producto ha sido actualizado exitosamente.",
          variant: "default",
        })
      } else {
        await addProduct(productData as Product) // Cast to Product, assuming ID is generated by backend
        toast({
          title: "Producto Añadido",
          description: "El nuevo producto ha sido añadido exitosamente.",
          variant: "default",
        })
      }
      setIsDialogOpen(false)
      fetchProducts()
    } catch (err) {
      toast({
        title: "Error",
        description: "No se pudo guardar el producto.",
        variant: "destructive",
      })
      console.error(err)
    } finally {
      setIsSubmitting(false)
    }
  }

  if (loading) {
    return <div className="flex justify-center items-center h-64"><Loader2 className="h-8 w-8 animate-spin" /></div>
  }

  if (error) {
    return <div className="text-center text-red-500">{error}</div>
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-end">
        <Button onClick={handleAddProduct}>
          <Plus className="mr-2 h-4 w-4" /> Añadir Producto
        </Button>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Imagen</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Categoría</TableHead>
            <TableHead>Precio</TableHead>
            <TableHead>Acciones</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {products.map((product) => (
            <TableRow key={product.id}>
              <TableCell>
                <img src={product.image || "/placeholder.svg"} alt={product.name} className="w-12 h-12 object-cover rounded-md" />
              </TableCell>
              <TableCell className="font-medium">{product.name}</TableCell>
              <TableCell>{product.category}</TableCell>
              <TableCell>${product.price.toFixed(2)}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  <Button variant="outline" size="icon" onClick={() => handleEditProduct(product)}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">Editar</span>
                  </Button>
                  <Button variant="destructive" size="icon" onClick={() => handleDeleteProduct(product.id)}>
                    <Trash className="h-4 w-4" />
                    <span className="sr-only">Eliminar</span>
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>{currentProduct ? 'Editar Producto' : 'Añadir Nuevo Producto'}</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Nombre
              </Label>
              <Input id="name" name="name" defaultValue={currentProduct?.name || ''} className="col-span-3" required />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Descripción
              </Label>
              <Textarea id="description" name="description" defaultValue={currentProduct?.description || ''} className="col-span-3" required />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="price" className="text-right">
                Precio
              </Label>
              <Input id="price" name="price" type="number" step="0.01" defaultValue={currentProduct?.price || ''} className="col-span-3" required />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="category" className="text-right">
                Categoría
              </Label>
              <Select name="category" defaultValue={currentProduct?.category || ''} required>
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Selecciona una categoría" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Camisetas">Camisetas</SelectItem>
                  <SelectItem value="Pantalones">Pantalones</SelectItem>
                  <SelectItem value="Chaquetas">Chaquetas</SelectItem>
                  <SelectItem value="Accesorios">Accesorios</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="image" className="text-right">
                URL Imagen
              </Label>
              <Input id="image" name="image" defaultValue={currentProduct?.image || ''} className="col-span-3" required />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="sizes" className="text-right">
                Tallas (separadas por coma)
              </Label>
              <Input id="sizes" name="sizes" defaultValue={currentProduct?.sizes?.join(', ') || ''} className="col-span-3" placeholder="S, M, L, XL" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="details" className="text-right">
                Detalles (una línea por detalle)
              </Label>
              <Textarea id="details" name="details" defaultValue={currentProduct?.details?.join('\n') || ''} className="col-span-3" placeholder="Material: Algodón\nColor: Negro" />
            </div>
            <DialogFooter>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Guardando...
                  </>
                ) : (
                  'Guardar Cambios'
                )}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
